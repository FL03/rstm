name: rust

concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

on:
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]
    paths:
      - "**/rust.yml"
      - "**/*.rs"
      - "**/Cargo.*"
  push:
    branches: [ main, master ]
    tags: [ latest, v*, "*-nightly" ]
  repository_dispatch:
    types: [ rust ]
  workflow_dispatch:
    inputs:
      benchmark:
        default: true
        description: 'Run benchmarks'
        required: true
        type: boolean
      no_std:
        default: false
        description: 'Run tests with no_std feature'
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ x86_64-unknown-linux-gnu ]
        toolchain: [ stable ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.toolchain }}
          override: true
      -
        name: Build the workspace
        run: cargo build -r --locked --workspace --all-features --target ${{ matrix.target }}
  benchmark:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event.action == 'repository_dispatch' && github.event.action == 'rust' || github.event_name == 'workflow_dispatch' && github.event.inputs.benchmark
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ x86_64-unknown-linux-gnu ] # [ x86_64-unknown-linux-gnu, wasm32-unknown-unknown, wasm32-wasip1, wasm32-wasip2 ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          target: ${{ matrix.target }}
      -
        name: Benchmark the workspace
        run: cargo bench -v --locked --workspace --features full --target ${{ matrix.target }}
      - 
        name: Upload the benchmarks
        id: artifacts
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks}@${{ github.sha }}
          if-no-files-found: error
          overwrite: true
          retention-days: 7
          path: target/criterion/
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features:  [ full, default, all ]
        target: [ x86_64-unknown-linux-gnu ]
        toolchain: [ stable ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.toolchain }}
          override: true
      -
        name: Test (${{ matrix.features }})
        if: matrix.features != 'default' && matrix.features != 'all'
        run: cargo test -r --locked --workspace --target ${{ matrix.target}} --features ${{ matrix.features }}
      -
        name: Test (default)
        if: matrix.features == 'default'
        run: cargo test -r --locked --workspace --target ${{ matrix.target}}
      -
        name: Test (all-features)
        if: matrix.features == 'all'
        run: cargo test -r --locked --workspace --target ${{ matrix.target}} --all-features
  test_no_std:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.no_std || github.event_name == 'repository_dispatch' && github.event.action == 'rust'
    continue-on-error: true
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features:  [ alloc, no_std ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          toolchain: nightly
          override: true
      -
        name: Test (${{ matrix.features }})
        continue-on-error: true
        if: matrix.features != 'no_std'
        run: cargo test -r --locked --workspace  --no-default-features --features ${{ matrix.features }}
        env:
          RUSTFLAGS: "-C panic=abort -Z panic_abort_tests"
      -
        name: Test (no_std)
        continue-on-error: true
        if: matrix.features == 'no_std'
        run: cargo test -r --locked --workspace --no-default-features
        env:
          RUSTFLAGS: "-C panic=abort -Z panic_abort_tests"
